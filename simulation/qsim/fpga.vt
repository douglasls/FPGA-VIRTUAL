// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2018 16:55:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fpga
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fpga_vlg_sample_tst(
	iCLK_50,
	iSW,
	sampler_tx
);
input  iCLK_50;
input [17:0] iSW;
output sampler_tx;

reg sample;
time current_time;
always @(iCLK_50 or iSW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fpga_vlg_check_tst (
	oLEDR,
	sampler_rx
);
input [17:0] oLEDR;
input sampler_rx;

reg [17:0] oLEDR_expected;

reg [17:0] oLEDR_prev;

reg [17:0] oLEDR_expected_prev;

reg [17:0] last_oLEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	oLEDR_prev = oLEDR;
end

// update expected /o prevs

always @(trigger)
begin
	oLEDR_expected_prev = oLEDR_expected;
end



// expected oLEDR[0]
initial
begin
	oLEDR_expected[0] = 1'bX;
end 

// expected oLEDR[1]
initial
begin
	oLEDR_expected[1] = 1'bX;
end 

// expected oLEDR[2]
initial
begin
	oLEDR_expected[2] = 1'bX;
end 

// expected oLEDR[3]
initial
begin
	oLEDR_expected[3] = 1'bX;
end 

// expected oLEDR[4]
initial
begin
	oLEDR_expected[4] = 1'bX;
end 

// expected oLEDR[5]
initial
begin
	oLEDR_expected[5] = 1'bX;
end 

// expected oLEDR[6]
initial
begin
	oLEDR_expected[6] = 1'bX;
end 

// expected oLEDR[7]
initial
begin
	oLEDR_expected[7] = 1'bX;
end 
// generate trigger
always @(oLEDR_expected or oLEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oLEDR = %b | ",oLEDR_expected_prev);
	$display("| real oLEDR = %b | ",oLEDR_prev);
`endif
	if (
		( oLEDR_expected_prev[0] !== 1'bx ) && ( oLEDR_prev[0] !== oLEDR_expected_prev[0] )
		&& ((oLEDR_expected_prev[0] !== last_oLEDR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[0] = oLEDR_expected_prev[0];
	end
	if (
		( oLEDR_expected_prev[1] !== 1'bx ) && ( oLEDR_prev[1] !== oLEDR_expected_prev[1] )
		&& ((oLEDR_expected_prev[1] !== last_oLEDR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[1] = oLEDR_expected_prev[1];
	end
	if (
		( oLEDR_expected_prev[2] !== 1'bx ) && ( oLEDR_prev[2] !== oLEDR_expected_prev[2] )
		&& ((oLEDR_expected_prev[2] !== last_oLEDR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[2] = oLEDR_expected_prev[2];
	end
	if (
		( oLEDR_expected_prev[3] !== 1'bx ) && ( oLEDR_prev[3] !== oLEDR_expected_prev[3] )
		&& ((oLEDR_expected_prev[3] !== last_oLEDR_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[3] = oLEDR_expected_prev[3];
	end
	if (
		( oLEDR_expected_prev[4] !== 1'bx ) && ( oLEDR_prev[4] !== oLEDR_expected_prev[4] )
		&& ((oLEDR_expected_prev[4] !== last_oLEDR_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[4] = oLEDR_expected_prev[4];
	end
	if (
		( oLEDR_expected_prev[5] !== 1'bx ) && ( oLEDR_prev[5] !== oLEDR_expected_prev[5] )
		&& ((oLEDR_expected_prev[5] !== last_oLEDR_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[5] = oLEDR_expected_prev[5];
	end
	if (
		( oLEDR_expected_prev[6] !== 1'bx ) && ( oLEDR_prev[6] !== oLEDR_expected_prev[6] )
		&& ((oLEDR_expected_prev[6] !== last_oLEDR_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[6] = oLEDR_expected_prev[6];
	end
	if (
		( oLEDR_expected_prev[7] !== 1'bx ) && ( oLEDR_prev[7] !== oLEDR_expected_prev[7] )
		&& ((oLEDR_expected_prev[7] !== last_oLEDR_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[7] = oLEDR_expected_prev[7];
	end
	if (
		( oLEDR_expected_prev[8] !== 1'bx ) && ( oLEDR_prev[8] !== oLEDR_expected_prev[8] )
		&& ((oLEDR_expected_prev[8] !== last_oLEDR_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[8] = oLEDR_expected_prev[8];
	end
	if (
		( oLEDR_expected_prev[9] !== 1'bx ) && ( oLEDR_prev[9] !== oLEDR_expected_prev[9] )
		&& ((oLEDR_expected_prev[9] !== last_oLEDR_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[9] = oLEDR_expected_prev[9];
	end
	if (
		( oLEDR_expected_prev[10] !== 1'bx ) && ( oLEDR_prev[10] !== oLEDR_expected_prev[10] )
		&& ((oLEDR_expected_prev[10] !== last_oLEDR_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[10] = oLEDR_expected_prev[10];
	end
	if (
		( oLEDR_expected_prev[11] !== 1'bx ) && ( oLEDR_prev[11] !== oLEDR_expected_prev[11] )
		&& ((oLEDR_expected_prev[11] !== last_oLEDR_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[11] = oLEDR_expected_prev[11];
	end
	if (
		( oLEDR_expected_prev[12] !== 1'bx ) && ( oLEDR_prev[12] !== oLEDR_expected_prev[12] )
		&& ((oLEDR_expected_prev[12] !== last_oLEDR_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[12] = oLEDR_expected_prev[12];
	end
	if (
		( oLEDR_expected_prev[13] !== 1'bx ) && ( oLEDR_prev[13] !== oLEDR_expected_prev[13] )
		&& ((oLEDR_expected_prev[13] !== last_oLEDR_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[13] = oLEDR_expected_prev[13];
	end
	if (
		( oLEDR_expected_prev[14] !== 1'bx ) && ( oLEDR_prev[14] !== oLEDR_expected_prev[14] )
		&& ((oLEDR_expected_prev[14] !== last_oLEDR_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[14] = oLEDR_expected_prev[14];
	end
	if (
		( oLEDR_expected_prev[15] !== 1'bx ) && ( oLEDR_prev[15] !== oLEDR_expected_prev[15] )
		&& ((oLEDR_expected_prev[15] !== last_oLEDR_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[15] = oLEDR_expected_prev[15];
	end
	if (
		( oLEDR_expected_prev[16] !== 1'bx ) && ( oLEDR_prev[16] !== oLEDR_expected_prev[16] )
		&& ((oLEDR_expected_prev[16] !== last_oLEDR_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[16] = oLEDR_expected_prev[16];
	end
	if (
		( oLEDR_expected_prev[17] !== 1'bx ) && ( oLEDR_prev[17] !== oLEDR_expected_prev[17] )
		&& ((oLEDR_expected_prev[17] !== last_oLEDR_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oLEDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oLEDR_expected_prev);
		$display ("     Real value = %b", oLEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oLEDR_exp[17] = oLEDR_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fpga_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iCLK_50;
reg [17:0] iSW;
// wires                                               
wire [17:0] oLEDR;

wire sampler;                             

// assign statements (if any)                          
fpga i1 (
// port map - connection between master ports and signals/registers   
	.iCLK_50(iCLK_50),
	.iSW(iSW),
	.oLEDR(oLEDR)
);

// iCLK_50
always
begin
	iCLK_50 = 1'b0;
	iCLK_50 = #25000 1'b1;
	#25000;
end 

// iSW[0]
initial
begin
	iSW[0] = 1'b0;
	iSW[0] = #70000 1'b1;
	iSW[0] = #30000 1'b0;
	iSW[0] = #370000 1'b1;
	iSW[0] = #380000 1'b0;
	iSW[0] = #70000 1'b1;
end 

// iSW[1]
initial
begin
	iSW[1] = 1'b0;
	iSW[1] = #70000 1'b1;
	iSW[1] = #30000 1'b0;
	iSW[1] = #20000 1'b1;
	iSW[1] = #30000 1'b0;
	iSW[1] = #370000 1'b1;
	iSW[1] = #30000 1'b0;
	iSW[1] = #420000 1'b1;
end 

// iSW[2]
initial
begin
	iSW[2] = 1'b0;
	iSW[2] = #170000 1'b1;
	iSW[2] = #120000 1'b0;
	iSW[2] = #430000 1'b1;
end 

// iSW[3]
initial
begin
	iSW[3] = 1'b0;
	iSW[3] = #220000 1'b1;
	iSW[3] = #30000 1'b0;
	iSW[3] = #120000 1'b1;
	iSW[3] = #30000 1'b0;
	iSW[3] = #220000 1'b1;
	iSW[3] = #30000 1'b0;
	iSW[3] = #120000 1'b1;
	iSW[3] = #30000 1'b0;
end 

// iSW[4]
initial
begin
	iSW[4] = 1'b0;
end 

// iSW[5]
initial
begin
	iSW[5] = 1'b0;
end 

// iSW[6]
initial
begin
	iSW[6] = 1'b0;
end 

// iSW[7]
initial
begin
	iSW[7] = 1'b0;
end 

fpga_vlg_sample_tst tb_sample (
	.iCLK_50(iCLK_50),
	.iSW(iSW),
	.sampler_tx(sampler)
);

fpga_vlg_check_tst tb_out(
	.oLEDR(oLEDR),
	.sampler_rx(sampler)
);
endmodule

